(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){"use strict";var Attr=function(name){var AttrList=require("./attr_list.js"),Validator=require("./validator.js");var validators=[],that=this,errorMessage="invalid setter call for "+name,defaultValueOrFunction,i,prop,addValidator,immutable=false,validator,listeners={};if(name===undefined||typeof name!=="string"){throw new Error("Attr: constructor requires a name parameter "+"which must be a string")}validator=function(thingBeingValidated){for(i=0;i<validators.length;++i){validators[i](thingBeingValidated)}return true};this.validatesWith=function(v){if(typeof v==="function"){validators.push(new Validator(v));return this}else{throw new Error("Attr: validator must be a function")}};this.defaultsTo=function(value){defaultValueOrFunction=value;return this};this.isReadOnly=function(){immutable=true;return this};this.isWritable=function(){immutable=false;return this};this.on=function(event,listener){if(event!=="set"&&event!=="get"){throw new Error("Attr: first argument to the 'on' method "+"should be 'set' or 'get'")}else if(typeof listener!=="function"){throw new Error("Attr: second argument to the 'on' method "+"should be a function")}else{listeners[event]=listener}};this.name=function(){return name};this.validator=function(){return validator};this.and=this;this.which=this;this.isImmutable=this.isReadOnly;this.isMutable=this.isWritable;this.clone=function(){var result,i;result=this instanceof AttrList?new AttrList(name):new Attr(name);for(i=0;i<validators.length;++i){result.validatesWith(validators[i])}result.defaultsTo(defaultValueOrFunction);if(immutable){result.isImmutable()}return result};this.addTo=function(obj){var attribute,listener,defaultValue;if(!obj||typeof obj!=="object"){throw new Error("Attr: addAttr method requires an object "+"parameter")}obj[name]=function(newValue){var preValue;if(newValue!==undefined){if(immutable&&attribute!==undefined){throw new Error("cannot set the immutable property "+name+" after it has been set")}else if(!validator(newValue)){throw new Error(errorMessage)}else{preValue=attribute;attribute=newValue;if(listeners.set!==undefined){listeners.set.call(obj,newValue,preValue)}}return obj}else{if(listeners.get!==undefined){listeners.get.call(obj,attribute)}return attribute}};defaultValue=typeof defaultValueOrFunction==="function"?defaultValueOrFunction():defaultValueOrFunction;if(defaultValue!==undefined&&validator(defaultValue)){obj[name](defaultValue)}else if(defaultValue!==undefined&&!validator(defaultValue)){throw new Error("Attr: Default value of "+defaultValue+" does not pass validation for "+name)}};addValidator=function(name){that[name]=function(param){validators.push(Validator.getValidator(name)(param));return that}};for(i=0;i<Validator.validators().length;++i){addValidator(Validator.validators()[i])}};module.exports=Attr},{"./attr_list.js":2,"./validator.js":5}],2:[function(require,module,exports){"use strict";var Attr=require("./attr.js");var AttrList=function(name){var that=this,listeners={};Attr.call(this,name);var delegate=function(obj,func){return function(){return obj[func].apply(obj,arguments)}};this.validateWith=this.validatesWith;this.defaultsTo=function(){};this.isImmutable=function(){};this.isMutable=function(){};this.eachOfWhich=this;this.on=function(event,listener){if(event!=="add"){throw new Error("AttrList: 'on' only responds to 'add' event")}if(typeof listener!=="function"){throw new Error("AttrList: 'on' requires a listener function as the second parameter")}listeners[event]=listener};this.addTo=function(obj){var prop,arr=[],actualList={};if(!obj||typeof obj!=="object"){throw new Error("AttrList: addTo method requires an object parameter")}else{actualList.pop=delegate(arr,"pop");actualList.add=function(item){if(that.validator()(item)){arr.push(item);if(listeners.add!==undefined){listeners.add.call(obj,item,actualList.size())}return this}else{throw new Error(that.errorMessage())}};actualList.replace=function(index,obj){if(typeof index!=="number"||parseInt(index,10)!==index){throw new Error("AttrList: replace method requires index parameter to be an integer")}if(index<0||index>=this.size()){throw new Error("AttrList: replace method index parameter out of bounds")}if(!that.validator()(obj)){throw new Error(that.errorMessage())}arr[index]=obj;return this};actualList.at=function(index){if(index<0||index>=this.size()){throw new Error("AttrList: Index out of bounds")}return arr[index]};actualList.get=actualList.at;actualList.size=function(){return arr.length};actualList.toJSON=function(JSONreps){var result=[],i,j;if(JSONreps!==undefined){for(i=0;i<JSONreps.length;++i){if(JSONreps[i].object===this){result=JSONreps[i].JSONrep}}}for(i=0;i<arr.length;++i){if(arr[i].toJSON){result.push(arr[i].toJSON(JSONreps))}else{result.push(arr[i])}}return result};obj[name]=function(){return actualList}}}};AttrList.prototype=new Attr("???");module.exports=AttrList},{"./attr.js":1}],3:[function(require,module,exports){"use strict";var Method=function(name,method){if(!name||typeof name!=="string"){throw new Error("Method: constructor requires a name parameter which must be a string")}else if(!method||typeof method!=="function"){throw new Error("Method: second parameter must be a function")}this.addTo=function(obj){if(!obj||typeof obj!=="object"){throw new Error("Method: addTo method requires an object parameter")}obj[name]=method}};module.exports=Method},{}],4:[function(require,module,exports){"use strict";require("../util/index_of.js");var models={};var getModel=function(name){if(typeof name!=="string"){throw new Error("Jermaine: argument to getModel must be a string")}if(models[name]===undefined){throw new Error("No model by the name of "+name+" found")}else{return models[name]}};var getModels=function(name){var model,result=[];for(model in models){result.push(model)}return result};var Model=function(specification){var methods={},attributes={},pattern,modelName,modified=true,requiredConstructorArgs=[],optionalConstructorArgs=[],parents=[],Method=require("./method.js"),Attr=require("./attr.js"),AttrList=require("./attr_list.js"),EventEmitter=require("../util/event_emitter.js"),property,listProperties,updateConstructor,isImmutable,initializer=function(){},constructor=function(){},model=function(){if(modified){model.validate();updateConstructor()}return constructor.apply(this,arguments)};if(arguments.length===1){if(typeof specification==="string"){modelName=specification;specification=undefined}}if(arguments.length>1){modelName=specification;specification=arguments[arguments.length-1]}if(specification&&typeof specification==="function"){model=new Model(modelName);specification.call(model);return model}else if(specification){throw new Error("Model: specification parameter must be a function")}if(modelName!==undefined&&typeof modelName==="string"){models[modelName]=model}else if(modelName!==undefined){throw new Error("Model: model name must be a string")}var hasAProperty=function(type,name){var Property,methodName,attribute;Property=type==="Attr"?Attr:AttrList;methodName=type==="Attr"?"hasA":"hasMany";modified=true;if(typeof name==="string"){attribute=new Property(name);attributes[name]=attribute;return attribute}else{throw new Error("Model: "+methodName+" parameter must be a string")}};property=function(type,name){var result;if(typeof name!=="string"){throw new Error("Model: expected string argument to "+type+" method, but recieved "+name)}result=type==="attribute"?attributes[name]:methods[name];if(result===undefined){throw new Error("Model: "+type+" "+name+" does not exist!")}return result};listProperties=function(type){var i,list=[],properties=type==="attributes"?attributes:methods;for(i in properties){if(properties.hasOwnProperty(i)){list.push(i)}}return list};updateConstructor=function(){constructor=function(){var i,j,err,attribute,attributeList=model.attributes(),methodList=model.methods(),emitter=new EventEmitter,attr,attrChangeListeners={},changeHandler,addProperties,that=this;if(!(this instanceof model)){if(arguments.length>0){return new model(arguments)}else{return new model}}this.emitter=function(){return emitter};this.emitter().removeJermaineChangeListener=function(attrName,obj){if(typeof attrName!=="string"){throw new Error("attrName must be a string")}else if(typeof obj!=="object"||obj.toJSON===undefined||obj.emitter===undefined){throw new Error("obj must be a jermaine object")}else{obj.emitter().removeListener("change",attrChangeListeners[attrName])}};this.emitter().addJermaineChangeListener=function(attrName,obj){if(typeof attrName!=="string"){throw new Error("attrName must be a string")}else if(typeof obj!=="object"||obj.toJSON===undefined||obj.emitter===undefined){throw new Error("obj must be a jermaine object")}else{if(attrChangeListeners[attrName]===undefined){attrChangeListeners[attrName]=function(data){var newData=[],emit=true;for(i=0;i<data.length&&emit===true;++i){newData.push(data[i]);if(data[i].origin===that){emit=false}}if(emit){newData.push({key:attrName,origin:that});that.emit("change",newData)}}}obj.emitter().on("change",attrChangeListeners[attrName])}};this.on=this.emitter().on;this.emit=this.emitter().emit;this.toJSON=function(JSONreps){var attributeValue,i,j,thisJSONrep={},attributeJSONrep;if(JSONreps===undefined){JSONreps=[];JSONreps.push({object:this,JSONrep:thisJSONrep})}else if(typeof JSONreps!=="object"){throw new Error("Instance: toJSON should not take a parameter (unless called recursively)")}else{for(i=0;i<JSONreps.length;++i){if(JSONreps[i].object===this){thisJSONrep=JSONreps[i].JSONrep}}}for(i=0;i<attributeList.length;++i){attributeJSONrep=null;attributeValue=this[attributeList[i]]();for(j=0;j<JSONreps.length;++j){if(JSONreps[j].object===attributeValue){attributeJSONrep=JSONreps[j].JSONrep}}if(attributeValue!==undefined&&attributeValue!==null&&attributeValue.toJSON!==undefined&&attributeJSONrep===null){attributeJSONrep=attributes[attributeList[i]]instanceof AttrList?[]:{};JSONreps.push({object:attributeValue,JSONrep:attributeJSONrep});JSONreps[JSONreps.length-1].JSONrep=attributeValue.toJSON(JSONreps)}if(attributeJSONrep===null){thisJSONrep[attributeList[i]]=attributeValue}else{thisJSONrep[attributeList[i]]=attributeJSONrep}}return thisJSONrep};this.toString=pattern!==undefined?pattern:function(){return"Jermaine Model Instance"};changeHandler=function(attr){if(!(attr instanceof AttrList)){attr.on("set",function(newValue,preValue){if(preValue!==undefined&&preValue!==null&&preValue.on!==undefined&&preValue.toJSON!==undefined&&preValue.emitter!==undefined){if(preValue.emitter().listeners("change").length<1){throw new Error("preValue should always have a listener defined if it is a model")}this.emitter().removeJermaineChangeListener(attr.name(),preValue)}if(newValue!==undefined&&newValue!==null&&newValue.on!==undefined&&newValue.toJSON!==undefined&&newValue.emitter!==undefined){this.emitter().addJermaineChangeListener(attr.name(),newValue)}this.emit("change",[{key:attr.name(),value:newValue,origin:this}])})}else{attr.on("add",function(newValue,newSize){this.emit("change",[{action:"add",key:attr.name(),value:newValue,origin:this}])})}};for(i=0;i<attributeList.length;++i){attr=model.attribute(attributeList[i]);changeHandler.call(this,attr)}for(i=0;i<attributeList.length+methodList.length;++i){if(i<attributeList.length){if(isImmutable){model.attribute(attributeList[i]).isImmutable()}model.attribute(attributeList[i]).addTo(this)}else{model.method(methodList[i-attributeList.length]).addTo(this)}}if(arguments.length>0){if(arguments.length<requiredConstructorArgs.length){err="Constructor requires ";for(i=0;i<requiredConstructorArgs.length;++i){err+=requiredConstructorArgs[i];err+=i===requiredConstructorArgs.length-1?"":", "}err+=" to be specified";throw new Error(err)}if(arguments.length>requiredConstructorArgs.length+optionalConstructorArgs.length){throw new Error("Too many arguments to constructor. Expected "+requiredConstructorArgs.length+" required arguments and "+optionalConstructorArgs.length+" optional arguments")}else{for(i=0;i<arguments.length;++i){attribute=i<requiredConstructorArgs.length?requiredConstructorArgs[i]:optionalConstructorArgs[i-requiredConstructorArgs.length];if(model.attribute(attribute)instanceof AttrList){if(Object.prototype.toString.call(arguments[i])!=="[object Array]"){throw new Error("Model: Constructor requires 'names' attribute to be set with an Array")}else{for(j=0;j<arguments[i].length;++j){this[attribute]().add(arguments[i][j])}}}else{this[attribute](arguments[i])}}}}initializer.call(this)}};model.hasA=function(attr){return hasAProperty("Attr",attr)};model.hasAn=model.hasA;model.hasSome=model.hasA;model.hasMany=function(attrs){return hasAProperty("AttrList",attrs)};model.isA=function(parent){var i,parentAttributes,parentMethods,isAModel;modified=true;isAModel=function(potentialModel){var i,M=new Model;for(i in M){if(M.hasOwnProperty(i)&&typeof potentialModel[i]!==typeof M[i]){return false}}return true};if(typeof parent!=="function"||!isAModel(parent)){throw new Error("Model: parameter sent to isA function must be a Model")}if(parents.length===0){parents.push(parent)}else{throw new Error("Model: Model only supports single inheritance at this time")}parentAttributes=parents[0].attributes();for(i=0;i<parentAttributes.length;++i){if(attributes[parentAttributes[i]]===undefined){attributes[parentAttributes[i]]=parents[0].attribute(parentAttributes[i]).clone();attributes[parentAttributes[i]].isMutable()}}parentMethods=parents[0].methods();for(i=0;i<parentMethods.length;++i){if(methods[parentMethods[i]]===undefined){methods[parentMethods[i]]=parents[0].method(parentMethods[i])}}for(i=0;i<parents.length;i++){model.prototype=new parents[i]}};model.isAn=model.isA;model.parent=function(){return parents[0].apply(this,arguments)};model.attribute=function(attr){return property("attribute",attr)};model.attributes=function(){return listProperties("attributes")};model.method=function(m){return property("method",m)};model.methods=function(){return listProperties("methods")};model.isBuiltWith=function(){var optionalParamFlag=false,i;modified=true;requiredConstructorArgs=[];optionalConstructorArgs=[];for(i=0;i<arguments.length;++i){if(typeof arguments[i]==="string"&&arguments[i].charAt(0)!=="%"){if(optionalParamFlag){throw new Error("Model: isBuiltWith requires parameters preceded with a % to be the final parameters before the optional function")}else{requiredConstructorArgs.push(arguments[i])}}else if(typeof arguments[i]==="string"&&arguments[i].charAt(0)==="%"){optionalParamFlag=true;optionalConstructorArgs.push(arguments[i].slice(1))}else if(typeof arguments[i]==="function"&&i===arguments.length-1){initializer=arguments[i]}else{throw new Error("Model: isBuiltWith parameters must be strings except for a function as the optional final parameter")}}};model.isImmutable=function(){isImmutable=true};model.looksLike=function(p){modified=true;pattern=p};model.respondsTo=function(methodName,methodBody){var m=new Method(methodName,methodBody);modified=true;methods[methodName]=m};model.validate=function(){var i,attributes=this.attributes(),methods=this.methods();for(i=0;i<requiredConstructorArgs.length;++i){try{this.attribute(requiredConstructorArgs[i])}catch(e){throw new Error(requiredConstructorArgs[i]+", specified in the isBuiltWith method, is not an attribute")}}for(i=0;i<optionalConstructorArgs.length;++i){try{this.attribute(optionalConstructorArgs[i])}catch(e){throw new Error(optionalConstructorArgs[i]+", specified in the isBuiltWith method, is not an attribute")}}for(i=0;i<attributes.length;i++){if(methods.indexOf(attributes[i])>-1){throw new Error("Model: invalid model specification to "+attributes[i]+" being both an attribute and method")}}if(isImmutable){for(i=0;i<attributes.length;i++){if(requiredConstructorArgs.indexOf(attributes[i])<0){throw new Error("immutable objects must have all attributes required in a call to isBuiltWith")}}}modified=false};return model};Model.getModel=getModel;Model.getModels=getModels;module.exports=Model},{"../util/event_emitter.js":8,"../util/index_of.js":9,"./attr.js":1,"./attr_list.js":2,"./method.js":3}],5:[function(require,module,exports){"use strict";require("../util/index_of.js");var Model=require("./model.js");var validators={};var Validator=function(spec){var validatorFunction=function(arg){var result,resultObject={},errorMessage;result=spec.call(resultObject,arg);if(!result){errorMessage=resultObject.message||"validator failed with parameter "+arg;throw new Error(errorMessage)}return result};return validatorFunction};Validator.addValidator=function(name,v,argValidator){if(name===undefined||typeof name!=="string"){throw new Error("addValidator requires a name to be specified as the first parameter")}if(v===undefined||typeof v!=="function"){throw new Error("addValidator requires a function as the second parameter")}if(argValidator!==undefined&&typeof argValidator!=="function"){throw new Error("addValidator third optional argument must be a "+"function")}if(validators[name]===undefined){validators[name]=function(expected){if(argValidator!==undefined){if(!argValidator(expected)){throw new Error("Validator: Invalid argument for "+name+" validator")}}return new Validator(function(val){var resultObject={actual:val,param:val},result=v.call(resultObject,expected);this.message=resultObject.message;return result})}}else{throw new Error("Validator '"+name+"' already defined")}};Validator.getValidator=function(name){var result;if(name===undefined){throw new Error("Validator: getValidator method requires a string parameter")}else if(typeof name!=="string"){throw new Error("Validator: parameter to getValidator method must be a string")}result=validators[name];if(result===undefined){throw new Error("Validator: '"+name+"' does not exist")}return result};Validator.validators=function(){var prop,result=[];for(prop in validators){if(validators.hasOwnProperty(prop)){result.push(prop)}}return result};Validator.addValidator("isGreaterThan",function(val){this.message=this.param+" should be greater than "+val;return this.param>val});Validator.addValidator("isLessThan",function(val){this.message=this.param+" should be less than "+val;return this.param<val});Validator.addValidator("isOneOf",function(val){this.message=this.param+" should be one of the set: "+val;return val.indexOf(this.param)>-1});Validator.addValidator("isA",function(val){var types=["string","number","boolean","function","object"],models=Model.getModels();if(typeof val==="string"&&types.indexOf(val)>-1){this.message=this.param+" should be a "+val;return typeof this.param===val}else if(typeof val==="string"&&models.indexOf(val)>-1){this.message="parameter should be an instance of "+val;return this.param instanceof Model.getModel(val)}else if(val==="integer"){if(this.param.toString!==undefined){this.message=this.param.toString()+" should be an integer"}else{this.message="parameter should be an integer"}return typeof this.param==="number"&&parseInt(this.param,10)===this.param}},function(val){var typesAndModels=["string","number","boolean","function","object","integer"].concat(Model.getModels());return typesAndModels.indexOf(val)>=0});validators.isAn=validators.isA;module.exports=Validator},{"../util/index_of.js":9,"./model.js":4}],6:[function(require,module,exports){require("./util/index_of.js");var Model=require("./core/model.js");module.exports={Attr:require("./core/attr.js"),AttrList:require("./core/attr_list.js"),Model:Model,getModel:Model.getModel,getModels:Model.getModels,Validator:require("./core/validator.js"),Method:require("./core/method.js"),util:{EventEmitter:require("./util/event_emitter.js"),namespace:require("./util/namespace.js")}}},{"./core/attr.js":1,"./core/attr_list.js":2,"./core/method.js":3,"./core/model.js":4,"./core/validator.js":5,"./util/event_emitter.js":8,"./util/index_of.js":9,"./util/namespace.js":10}],7:[function(require,module,exports){window.jermaine=require("./jermaine.js")},{"./jermaine.js":6}],8:[function(require,module,exports){"use strict";require("./index_of.js");var EventEmitter=function(){var that=this,listeners={};this.on=function(event,listener){if(typeof event!=="string"){throw new Error("EventEmitter: first argument to 'on' should be a string")}if(typeof listener!=="function"){throw new Error("EventEmitter: second argument to 'on' should be a function")}if(!listeners[event]){listeners[event]=[]}listeners[event].push(listener);return that};this.addListener=this.on;this.once=function(event,listener){var f=function(){listener(arguments);that.removeListener(event,f)};that.on(event,f);return that};this.removeListener=function(event,listener){var index;if(typeof event!=="string"){throw new Error("EventEmitter: first parameter to removeListener method must be a string representing an event")}if(typeof listener!=="function"){throw new Error("EventEmitter: second parameter must be a function to remove as an event listener")}if(listeners[event]===undefined||listeners[event].length===0){throw new Error("EventEmitter: there are no listeners registered for the '"+event+"' event")}index=listeners[event].indexOf(listener);if(index!==-1){listeners[event].splice(index,1)}return that};this.removeAllListeners=function(event){if(typeof event!=="string"){throw new Error("EventEmitter: parameter to removeAllListeners should be a string representing an event")}if(listeners[event]!==undefined){listeners[event]=[]}return that};this.setMaxListeners=function(number){return that};this.listeners=function(event){if(typeof event!=="string"){throw new Error("EventEmitter: listeners method must be called with the name of an event")}else if(listeners[event]===undefined){return[]}return listeners[event]};this.emit=function(event,data){var i,params;if(arguments.length>1){params=[]}for(i=1;i<arguments.length;++i){params.push(arguments[i])}if(listeners[event]!==undefined){for(i=0;i<listeners[event].length;i=i+1){listeners[event][i].apply(this,params)}}};return that};module.exports=EventEmitter},{"./index_of.js":9}],9:[function(require,module,exports){if(!Array.prototype.indexOf){Array.prototype.indexOf=function(searchElement){"use strict";if(this===null){throw new TypeError}var t=Object(this);var len=t.length>>>0;if(len===0){return-1}var n=0;if(arguments.length>0){n=Number(arguments[1]);if(n!==n){n=0}else if(n!==0&&n!==Infinity&&n!==-Infinity){n=(n>0||-1)*Math.floor(Math.abs(n))}}if(n>=len){return-1}var k=n>=0?n:Math.max(len-Math.abs(n),0);for(;k<len;k++){if(k in t&&t[k]===searchElement){return k}}return-1}}module.exports=undefined},{}],10:[function(require,module,exports){module.exports=function namespace(ns,aliases,func){var nsRegExp=/^([a-zA-Z]+)(\.[a-zA-Z]*)*$/,nsArray,currentNS,i;if(ns.match(nsRegExp)===null||ns==="window"){throw new Error("namespace: "+ns+" is a malformed namespace string")}if(aliases!==undefined&&func===undefined){if(typeof aliases==="function"){func=aliases;aliases=undefined}else if(typeof aliases==="object"){throw new Error("namespace: if second argument exists, final function argument must exist")}else if(typeof aliases!=="object"){throw new Error("namespace: second argument must be an object of aliased local namespaces")}}else if(typeof aliases!=="object"&&typeof func==="function"){throw new Error("namespace: second argument must be an object of aliased local namespaces")}nsArray=ns.split(".");if(nsArray[0]==="window"){currentNS=window}else{currentNS=window[nsArray[0]]===undefined?window[nsArray[0]]={}:window[nsArray[0]]}if(func!==undefined&&typeof func!=="function"){throw new Error("namespace: last parameter must be a function that accepts a namespace parameter")}for(i=1;i<nsArray.length;i=i+1){if(currentNS[nsArray[i]]===undefined){currentNS[nsArray[i]]={}}currentNS=currentNS[nsArray[i]]}if(aliases===undefined&&func){func(currentNS)}else if(func){for(i in aliases){if(aliases.hasOwnProperty(i)){aliases[i]=namespace(aliases[i])}}func.call(aliases,currentNS)}return currentNS}},{}]},{},[7]);